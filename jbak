#!/bin/bash

set   -o errexit
shopt -s dotglob extglob globstar nullglob

trap trap_int INT
trap_int () {
	printf >&2 'Interrupted\n'
	exit 1
}

  black=`tput setaf 0`
    red=`tput setaf 1`
  green=`tput setaf 2`
 yellow=`tput setaf 3`
   blue=`tput setaf 4`
magenta=`tput setaf 5`
   cyan=`tput setaf 6`
  white=`tput setaf 7`
  reset=`tput op`

print_c () {
	local    color=$1
	local   fmtstr=$2
	shift 2

	printf "%s$fmtstr%s\n" "${!color}" "$@" "$reset"
}

declare -A file_list

read_config () {
	while read -r line; do
		case $line in
			""|\#*) continue ;; # Empty lines/comments
			/*) # Included Directories
				mode='TRUE'
				;;
			!/*) # Excluded Directories
				mode='FALSE'
				line=${line:1}
				;;
			!*) # Excluded Patterns
				print_c red '>%s<' "$line"
				continue
				;;
			*)
				printf >&2 'Error parsing config file.  Invalid line:\n'
				printf >&2 '    %s\n' "$line"
				exit 2
				;;
		esac

		# Quote spaces for eval
		line=`sed -e 's/\s/\\\&/g' <<< "$line"`
		# line=$(sed -e 's/\(^\|[^\]\)\(\(\\\{2\}\)*\s\)/\1\\\2/g' <<< "$line")
		eval "files=( $line )" # Expand shell globs

		for new_file in "${files[@]}"; do
			print_c green '>%s<\t\t%s' "$new_file" "$mode"
			if [ -d "$new_file" ]; then
				new_file=${new_file%%/} # Strip trailing slashes

				for file in "${!file_list[@]}"; do
					if [[ $file =~ ^$new_file/ ]]; then
						print_c red '>%s<\t\t%s' "$file" "${file_list[$file]}"
						unset "file_list[$file]"
					# elif [[ -d $file && $new_file =~ ^$file/ ]]; then
					# 	print_c yellow 'Skipping >%s<' "$new_file"
					# 	add_file='false'
					# 	break
					else
						printf '>%s<\t\t%s\n' "$file" "${file_list[$file]}"
					fi
				done
			fi

			file_list[$new_file]=$mode
		done
	done < "$1"
}

read_config 'test_dirs'

print_c yellow '\nFile List:'
for file in "${!file_list[@]}"; do
	if [ "${file_list[$file]}" = 'TRUE' ]; then c=green
	else                                        c=red
	fi
	print_c $c '>%s<' "$file"
done
